import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import { Video } from "@/entities/Video";
import { 
  Play, 
  Sparkles, 
  Zap, 
  Crown, 
  ArrowRight, 
  Check,
  Video as VideoIcon,
  TrendingUp,
  Users,
  Clock,
  Star,
  ChevronRight
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

const translations = {
  en: {
    hero: {
      badge: "🔥 AI-Powered Video Generation",
      title: "Want AI to make your viral Shorts?",
      subtitle: "Try it free today 👉",
      description: "Create engaging YouTube Shorts, TikToks, and Instagram Reels in seconds using advanced AI. No editing skills required - just ideas!",
      cta: "🚀 Start Creating Free",
      watchDemo: "Watch Demo",
      freeText: "Start with 1 free video daily"
    },
    demoVideo: {
      title: "See VideoAI in Action",
      subtitle: "Real video generated by our AI in under 60 seconds",
      playButton: "▶️ Play Demo Video",
      stats: [
        "Generated in 45 seconds",
        "Optimized for TikTok",
        "Cinematic style"
      ]
    },
    features: {
      title: "Everything You Need to Go Viral",
      subtitle: "Powerful AI tools designed for content creators",
      items: [
        {
          icon: Sparkles,
          title: "AI Script Generation",
          description: "Get compelling scripts generated instantly from your topic or idea"
        },
        {
          icon: VideoIcon,
          title: "Video Creation",
          description: "Transform scripts into engaging short-form videos with AI"
        },
        {
          icon: TrendingUp,
          title: "Trending Optimized",
          description: "Content optimized for viral potential on all major platforms"
        },
        {
          icon: Clock,
          title: "Lightning Fast",
          description: "Generate professional videos in under 60 seconds"
        }
      ]
    },
    social: {
      title: "Join Thousands of Creators",
      subtitle: "Who are already creating viral content with VideoAI",
      stats: [
        { number: "50K+", label: "Videos Generated" },
        { number: "10K+", label: "Active Creators" },
        { number: "2M+", label: "Total Views" }
      ]
    },
    testimonials: {
      title: "What Creators Are Saying",
      items: [
        {
          name: "Sarah Chen",
          role: "Content Creator",
          avatar: "SC",
          text: "VideoAI helped me grow from 1K to 100K followers in just 3 months. The AI-generated content is incredible!"
        },
        {
          name: "Mike Rodriguez",
          role: "YouTuber",
          avatar: "MR", 
          text: "I was spending hours editing videos. Now I create viral content in minutes. This is a game-changer!"
        },
        {
          name: "Lisa Wang",
          role: "TikTok Star",
          avatar: "LW",
          text: "The scripts are so engaging and the videos look professionally made. My engagement rates have doubled!"
        }
      ]
    },
    pricing: {
      title: "Simple, Transparent Pricing",
      subtitle: "Choose the plan that works for you",
      cta: "View All Plans",
      freePlan: "Start Free - No Credit Card Required"
    },
    cta: {
      title: "Ready to Create Your First Viral Video?",
      subtitle: "Join thousands of creators who are already using VideoAI to grow their audience",
      button: "🚀 Get Started Free",
      subtext: "No credit card required • 1 free video daily"
    }
  },
  zh: {
    hero: {
      badge: "🔥 AI驱动的视频生成",
      title: "想让AI制作您的病毒式短视频吗？",
      subtitle: "今天免费试用 👉",
      description: "使用先进AI在几秒钟内创建引人入胜的YouTube短视频、TikTok和Instagram短视频。无需编辑技能，只需想法！",
      cta: "🚀 免费开始创作",
      watchDemo: "观看演示",
      freeText: "每天1个免费视频开始"
    },
    demoVideo: {
      title: "看看VideoAI的实际效果",
      subtitle: "我们的AI在60秒内生成的真实视频",
      playButton: "▶️ 播放演示视频",
      stats: [
        "45秒内生成",
        "为TikTok优化",
        "电影风格"
      ]
    },
    features: {
      title: "成为病毒式传播所需的一切",
      subtitle: "为内容创作者设计的强大AI工具",
      items: [
        {
          icon: Sparkles,
          title: "AI脚本生成",
          description: "从您的主题或想法立即生成引人入胜的脚本"
        },
        {
          icon: VideoIcon,
          title: "视频创作",
          description: "使用AI将脚本转换为引人入胜的短视频"
        },
        {
          icon: TrendingUp,
          title: "趋势优化",
          description: "为所有主要平台的病毒式潜力优化内容"
        },
        {
          icon: Clock,
          title: "闪电般快速",
          description: "在60秒内生成专业视频"
        }
      ]
    },
    social: {
      title: "加入成千上万的创作者",
      subtitle: "他们已经在使用VideoAI创建病毒式内容",
      stats: [
        { number: "50K+", label: "生成的视频" },
        { number: "10K+", label: "活跃创作者" },
        { number: "2M+", label: "总观看量" }
      ]
    },
    testimonials: {
      title: "创作者们的评价",
      items: [
        {
          name: "陈莎拉",
          role: "内容创作者",
          avatar: "CS",
          text: "VideoAI帮助我在短短3个月内从1K粉丝增长到10万粉丝。AI生成的内容令人难以置信！"
        },
        {
          name: "麦克·罗德里格斯",
          role: "YouTuber",
          avatar: "MR",
          text: "我以前花几个小时编辑视频。现在我可以在几分钟内创建病毒式内容。这是一个改变游戏规则的工具！"
        },
        {
          name: "王丽莎",
          role: "TikTok明星",
          avatar: "LW",
          text: "脚本非常引人入胜，视频看起来专业制作。我的参与率翻了一番！"
        }
      ]
    },
    pricing: {
      title: "简单透明的定价",
      subtitle: "选择适合您的计划",
      cta: "查看所有计划",
      freePlan: "免费开始 - 无需信用卡"
    },
    cta: {
      title: "准备好创建您的第一个病毒式视频了吗？",
      subtitle: "加入成千上万已经使用VideoAI发展受众的创作者",
      button: "🚀 免费开始",
      subtext: "无需信用卡 • 每天1个免费视频"
    }
  }
};

export default function Home() {
  const [user, setUser] = useState(null);
  const [language, setLanguage] = useState("en");
  const [featuredVideos, setFeaturedVideos] = useState([]);
  const [isVideoLoading, setIsVideoLoading] = useState(false);

  const t = translations[language];

  // Check for referral code in URL
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const refCode = urlParams.get('ref');
    if (refCode) {
      // Store referral code in localStorage for later use during registration
      localStorage.setItem('referral_code', refCode);
    }
    
    checkAuth();
    loadFeaturedVideos();
  }, []);

  const checkAuth = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
      setLanguage(userData.preferred_language || "en");
      
      // If user just registered and there's a referral code, process it
      const storedRefCode = localStorage.getItem('referral_code');
      if (storedRefCode && !userData.referred_by) {
        await processReferral(userData, storedRefCode);
        localStorage.removeItem('referral_code');
      }
    } catch (error) {
      setUser(null);
    }
  };

  const processReferral = async (userData, refCode) => {
    try {
      // Update the new user with referral info
      await User.updateMyUserData({
        referred_by: refCode
      });

      // Find and update the referrer
      const users = await User.list();
      const referrer = users.find(u => u.referral_code === refCode);
      if (referrer) {
        await User.update(referrer.id, {
          referral_count: (referrer.referral_count || 0) + 1
        });
      }
    } catch (error) {
      console.error('Error processing referral:', error);
    }
  };

  const loadFeaturedVideos = async () => {
    try {
      const videos = await Video.filter({ is_featured: true }, '-created_date', 3);
      setFeaturedVideos(videos);
    } catch (error) {
      console.error('Error loading featured videos:', error);
    }
  };

  const handleGetStarted = async () => {
    if (user) {
      window.location.href = createPageUrl("Generate");
    } else {
      try {
        // Create a referral code for new users
        const refCode = Math.random().toString(36).substring(2, 8).toUpperCase();
        
        // Store the referral code to be used after login
        localStorage.setItem('pending_referral_code', refCode);
        
        await User.login();
      } catch (error) {
        console.error('Login error:', error);
      }
    }
  };

  const playDemoVideo = () => {
    setIsVideoLoading(true);
    setTimeout(() => {
      setIsVideoLoading(false);
      // In a real app, this would open a video modal
      const demoUrl = "https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1";
      window.open(demoUrl, '_blank');
    }, 1000);
  };

  return (
    <div className="min-h-screen">
      {/* Hero Section with Enhanced CTA */}
      <section className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 via-pink-500/20 to-purple-500/20 blur-3xl"></div>
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 lg:py-32">
          <div className="text-center">
            <Badge className="mb-8 bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 px-6 py-3 text-base font-semibold animate-pulse">
              {t.hero.badge}
            </Badge>
            
            <h1 className="text-5xl md:text-7xl lg:text-8xl font-bold text-white mb-8 leading-tight">
              <span className="bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                {t.hero.title}
              </span>
              <br />
              <span className="bg-gradient-to-r from-purple-400 via-pink-400 to-purple-400 bg-clip-text text-transparent animate-gradient">
                {t.hero.subtitle}
              </span>
            </h1>
            
            <p className="text-xl md:text-2xl text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed">
              {t.hero.description}
            </p>
            
            <div className="flex flex-col sm:flex-row gap-6 justify-center items-center mb-8">
              <Button 
                onClick={handleGetStarted}
                className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-10 py-8 text-xl font-bold rounded-2xl shadow-2xl hover:shadow-purple-500/25 transition-all duration-300 transform hover:scale-105 border-2 border-white/20"
              >
                {t.hero.cta}
                <ArrowRight className="w-6 h-6 ml-3" />
              </Button>
              
              <Button 
                variant="outline" 
                onClick={playDemoVideo}
                disabled={isVideoLoading}
                className="border-2 border-white/30 bg-white/10 backdrop-blur-sm text-white px-10 py-8 text-xl font-bold rounded-2xl hover:bg-white/20 transition-all duration-300"
              >
                {isVideoLoading ? (
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white mr-3"></div>
                ) : (
                  <Play className="w-6 h-6 mr-3 fill-current" />
                )}
                {t.hero.watchDemo}
              </Button>
            </div>

            <p className="text-green-400 font-semibold text-lg">
              ✨ {t.hero.freeText}
            </p>
          </div>
        </div>
      </section>

      {/* Enhanced Demo Video Section */}
      <section className="py-20 bg-black/30">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
              {t.demoVideo.title}
            </h2>
            <p className="text-xl text-gray-300">
              {t.demoVideo.subtitle}
            </p>
          </div>

          <div className="relative">
            <div className="aspect-video bg-gradient-to-br from-purple-900 to-pink-900 rounded-3xl shadow-2xl overflow-hidden border border-white/10">
              <div className="absolute inset-0 bg-black/40 flex items-center justify-center group cursor-pointer hover:bg-black/30 transition-all duration-300">
                <div className="text-center">
                  <div className="w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mb-6 mx-auto group-hover:scale-110 transition-transform duration-300 border-4 border-white/30">
                    <Play className="w-10 h-10 text-white fill-current ml-1" />
                  </div>
                  <p className="text-white text-2xl font-bold mb-2">{t.demoVideo.playButton}</p>
                  <div className="flex justify-center gap-4 mt-4">
                    {t.demoVideo.stats.map((stat, index) => (
                      <Badge key={index} variant="secondary" className="bg-white/20 text-white border-white/30">
                        {stat}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Glow effect */}
            <div className="absolute -inset-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded-3xl blur-2xl opacity-20 -z-10"></div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-6xl font-bold text-white mb-6">
              {t.features.title}
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              {t.features.subtitle}
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {t.features.items.map((feature, index) => (
              <Card key={index} className="bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300 group hover:transform hover:scale-105">
                <CardContent className="p-8">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300">
                    <feature.icon className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-white mb-4">{feature.title}</h3>
                  <p className="text-gray-300 leading-relaxed">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Social Proof Section */}
      <section className="py-20 bg-black/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-6xl font-bold text-white mb-6">
              {t.social.title}
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              {t.social.subtitle}
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            {t.social.stats.map((stat, index) => (
              <div key={index} className="text-center">
                <div className="text-5xl md:text-7xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-4">
                  {stat.number}
                </div>
                <div className="text-gray-300 text-xl">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-6xl font-bold text-white mb-6">
              {t.testimonials.title}
            </h2>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            {t.testimonials.items.map((testimonial, index) => (
              <Card key={index} className="bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300">
                <CardContent className="p-8">
                  <div className="flex items-center mb-6">
                    <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-bold mr-4">
                      {testimonial.avatar}
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">{testimonial.name}</h4>
                      <p className="text-gray-400 text-sm">{testimonial.role}</p>
                    </div>
                  </div>
                  <div className="flex mb-4">
                    {[...Array(5)].map((_, i) => (
                      <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                    ))}
                  </div>
                  <p className="text-gray-300 italic">"{testimonial.text}"</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Pricing Teaser */}
      <section className="py-20 bg-black/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-6xl font-bold text-white mb-6">
              {t.pricing.title}
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
              {t.pricing.subtitle}
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              <Link to={createPageUrl("Pricing")}>
                <Button className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-4 text-lg font-semibold rounded-xl">
                  {t.pricing.cta}
                  <ChevronRight className="w-5 h-5 ml-2" />
                </Button>
              </Link>
              
              <p className="text-green-400 font-semibold">
                ✨ {t.pricing.freePlan}
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Final CTA */}
      <section className="py-24 bg-gradient-to-r from-purple-500/30 to-pink-500/30 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-600/20 blur-3xl"></div>
        <div className="relative max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-4xl md:text-6xl font-bold text-white mb-8">
            {t.cta.title}
          </h2>
          <p className="text-xl text-gray-300 mb-12 max-w-3xl mx-auto">
            {t.cta.subtitle}
          </p>
          
          <div className="space-y-6">
            <Button 
              onClick={handleGetStarted}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-12 py-8 text-2xl font-bold rounded-2xl shadow-2xl hover:shadow-purple-500/25 transition-all duration-300 transform hover:scale-105 border-2 border-white/20"
            >
              {t.cta.button}
              <ArrowRight className="w-6 h-6 ml-3" />
            </Button>
            
            <p className="text-gray-300 text-lg">
              {t.cta.subtext}
            </p>
          </div>
        </div>
      </section>
    </div>
  );
}
