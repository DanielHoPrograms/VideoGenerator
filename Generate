
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import { Video } from "@/entities/Video";
import { InvokeLLM } from "@/integrations/Core";
import { 
  Sparkles, 
  Play, 
  Wand2, 
  Clock, 
  ArrowRight,
  Loader2,
  Crown,
  Zap
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import VideoPreview from "../components/video/VideoPreview";

const translations = {
  en: {
    title: "Generate Your Video",
    subtitle: "Create engaging short-form content in seconds",
    promptLabel: "Video Topic or Idea",
    promptPlaceholder: "Enter your video topic, script, or idea...",
    styleLabel: "Video Style",
    platformLabel: "Target Platform",
    generateScript: "Generate Script with AI",
    generateVideo: "Generate Video",
    upgradeRequired: "Daily Limit Reached! 🚫",
    dailyLimitReached: "You've reached your daily video limit",
    upgradeMessage: "Upgrade to Pro or Ultimate to generate more videos today",
    upgradeButton: "Upgrade Now",
    videosLeft: "videos left today",
    unlimited: "Unlimited videos",
    generatingScript: "Generating script...",
    generatingVideo: "Creating your amazing video...",
    videoReady: "Your video is ready! 🎉",
    processingSteps: [
      "Analyzing your prompt...",
      "Generating engaging script...",
      "Creating visual content...",
      "Adding trending elements...",
      "Optimizing for platform...",
      "Finalizing your video..."
    ],
    styles: {
      cinematic: "Cinematic",
      animated: "Animated",
      realistic: "Realistic",
      artistic: "Artistic"
    },
    platforms: {
      youtube_shorts: "YouTube Shorts",
      tiktok: "TikTok",
      instagram_reels: "Instagram Reels"
    }
  },
  zh: {
    title: "生成您的视频",
    subtitle: "在几秒钟内创建引人入胜的短视频内容",
    promptLabel: "视频主题或想法",
    promptPlaceholder: "输入您的视频主题、脚本或想法...",
    styleLabel: "视频风格",
    platformLabel: "目标平台",
    generateScript: "用AI生成脚本",
    generateVideo: "生成视频",
    upgradeRequired: "已达每日限制！🚫",
    dailyLimitReached: "您已达到每日视频限制",
    upgradeMessage: "升级到Pro或Ultimate以今天生成更多视频",
    upgradeButton: "立即升级",
    videosLeft: "今日剩余视频",
    unlimited: "无限制视频",
    generatingScript: "正在生成脚本...",
    generatingVideo: "正在创建您的精彩视频...",
    videoReady: "您的视频已准备就绪！🎉",
    processingSteps: [
      "分析您的提示...",
      "生成引人入胜的脚本...",
      "创建视觉内容...",
      "添加流行元素...",
      "为平台优化...",
      "完成您的视频..."
    ],
    styles: {
      cinematic: "电影风格",
      animated: "动画风格",
      realistic: "现实风格",
      artistic: "艺术风格"
    },
    platforms: {
      youtube_shorts: "YouTube短视频",
      tiktok: "TikTok",
      instagram_reels: "Instagram短视频"
    }
  }
};

const subscriptionLimits = {
  free: 1,
  pro: 5,
  ultimate: 999
};

export default function Generate() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [language, setLanguage] = useState("en");
  const [prompt, setPrompt] = useState("");
  const [script, setScript] = useState("");
  const [style, setStyle] = useState("cinematic");
  const [platform, setPlatform] = useState("youtube_shorts");
  const [isGeneratingScript, setIsGeneratingScript] = useState(false);
  const [isGeneratingVideo, setIsGeneratingVideo] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);
  const [generatedVideo, setGeneratedVideo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const t = translations[language];

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
      setLanguage(userData.preferred_language || "en");
      
      // Generate referral code if user doesn't have one
      if (!userData.referral_code) {
        const refCode = Math.random().toString(36).substring(2, 8).toUpperCase();
        await User.updateMyUserData({ referral_code: refCode });
        setUser({ ...userData, referral_code: refCode });
      }
    } catch (error) {
      User.loginWithRedirect(window.location.href);
    } finally {
      setIsLoading(false);
    }
  };

  const getRemainingVideos = () => {
    if (!user) return 0;
    
    const tier = user.subscription_tier || 'free';
    const limit = subscriptionLimits[tier];

    const today = new Date().toISOString().split('T')[0];
    const lastGenDate = user.last_generation_date;
    
    if (lastGenDate !== today) {
      return limit;
    }
    
    return Math.max(0, limit - (user.videos_generated_today || 0));
  };

  const canGenerateVideo = () => {
    if (!user) return false;
    return user.subscription_tier === 'ultimate' || getRemainingVideos() > 0;
  };

  const generateScript = async () => {
    if (!prompt.trim()) return;

    setIsGeneratingScript(true);
    
    try {
      const response = await InvokeLLM({
        prompt: `Generate an engaging script for a ${platform.replace('_', ' ')} video about: ${prompt}. 
        
        The script should be:
        - Hook viewers in the first 3 seconds with a compelling question or statement
        - Optimized for short-form content (30-60 seconds)
        - Include trending elements and popular phrases
        - Be conversational and authentic
        - Include a clear call-to-action
        - Match the ${style} style
        - Use language that resonates with ${platform.replace('_', ' ')} audience
        
        Please provide just the script content without any additional formatting or explanations.`,
        add_context_from_internet: true
      });

      setScript(response);
    } catch (error) {
      console.error("Error generating script:", error);
      alert("Failed to generate script. Please try again.");
    } finally {
      setIsGeneratingScript(false);
    }
  };

  const generateVideo = async () => {
    if (!canGenerateVideo()) return;
    if (!script.trim() && !prompt.trim()) return;

    setIsGeneratingVideo(true);
    setProgress(0);
    setCurrentStep(0);

    // Enhanced progress simulation with steps
    const stepInterval = setInterval(() => {
      setCurrentStep(prev => {
        if (prev < t.processingSteps.length - 1) {
          return prev + 1;
        }
        return prev;
      });
    }, 2000); // Change step every 2 seconds

    const progressInterval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 95) { // Stop progress at 95% before actual completion
          clearInterval(progressInterval);
          return 95;
        }
        return prev + Math.random() * 8; // Random progress increments
      });
    }, 300); // Update progress every 300ms

    try {
      // Create video record
      const videoData = {
        title: prompt || "AI Generated Video",
        script: script || prompt,
        generation_prompt: prompt,
        style: style,
        platform: platform,
        status: "processing"
      };

      const createdVideo = await Video.create(videoData);

      // Simulate realistic video generation time (e.g., 10-15 seconds)
      await new Promise(resolve => setTimeout(resolve, 12000)); // Increased simulation time

      // Generate sample YouTube embed or video URL
      const sampleEmbeds = [
        '<iframe width="315" height="560" src="https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1&mute=1" frameborder="0" allowfullscreen></iframe>',
        '<iframe width="315" height="560" src="https://www.youtube.com/embed/9bZkp7q19f0?autoplay=1&mute=1" frameborder="0" allowfullscreen></iframe>',
        '<iframe width="315" height="560" src="https://www.youtube.com/embed/kJQP7kiw5Fk?autoplay=1&mute=1" frameborder="0" allowfullscreen></iframe>'
      ];
      
      const randomEmbed = sampleEmbeds[Math.floor(Math.random() * sampleEmbeds.length)];

      // Update video with "completed" status and content
      const completedVideo = await Video.update(createdVideo.id, {
        status: "completed",
        video_url: `https://example.com/videos/${createdVideo.id}.mp4`,
        thumbnail_url: `https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg`, // Using a generic thumbnail
        duration: Math.floor(Math.random() * 30) + 30, // 30-60 seconds
        embed_code: randomEmbed,
        generation_time: Math.floor(Math.random() * 20) + 10 // Simulated generation time
      });

      // Update user's generation count
      const today = new Date().toISOString().split('T')[0];
      const isNewDay = user.last_generation_date !== today;
      
      await User.updateMyUserData({
        videos_generated_today: isNewDay ? 1 : (user.videos_generated_today || 0) + 1,
        last_generation_date: today,
        total_videos_generated: (user.total_videos_generated || 0) + 1
      });

      clearInterval(stepInterval);
      clearInterval(progressInterval);
      setProgress(100); // Set to 100% after completion
      setCurrentStep(t.processingSteps.length - 1); // Set to final step message
      
      // Show the completed video
      const finalVideo = { ...createdVideo, ...completedVideo };
      setGeneratedVideo(finalVideo);

    } catch (error) {
      console.error("Error generating video:", error);
      alert("Failed to generate video. Please try again.");
    } finally {
      // Ensure intervals are cleared even if an error occurs
      clearInterval(stepInterval);
      clearInterval(progressInterval);
      setIsGeneratingVideo(false);
    }
  };

  const handleVideoComplete = () => {
    setGeneratedVideo(null);
    setPrompt("");
    setScript("");
    setProgress(0);
    setCurrentStep(0);
    
    // Refresh user data to update counters
    checkAuth();
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>
      </div>
    );
  }

  if (generatedVideo) {
    return (
      <div className="min-h-screen py-8">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <VideoPreview 
            video={generatedVideo}
            language={language}
            onClose={handleVideoComplete} // Allows closing the preview to generate another
          />
          
          <div className="mt-8 text-center">
            <Button
              onClick={handleVideoComplete}
              variant="outline"
              className="border-white/20 text-white hover:bg-white/10 mr-4"
            >
              Create Another Video
            </Button>
            <Button
              onClick={() => navigate(createPageUrl("Dashboard"))}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white"
            >
              View All Videos
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-3xl md:text-5xl font-bold text-white mb-4">
            {t.title}
          </h1>
          <p className="text-xl text-gray-300 mb-8">
            {t.subtitle}
          </p>
          
          {/* Usage Indicator */}
          <div className="flex justify-center mb-8">
            <Badge className={`px-6 py-3 text-lg ${
              user.subscription_tier === 'ultimate' 
                ? 'bg-gradient-to-r from-yellow-400 to-orange-500' 
                : user.subscription_tier === 'pro'
                ? 'bg-gradient-to-r from-purple-500 to-pink-500'
                : 'bg-gradient-to-r from-gray-400 to-gray-500'
            } text-white border-0`}>
              {user.subscription_tier === 'ultimate' ? (
                <>
                  <Crown className="w-5 h-5 mr-2" />
                  {t.unlimited}
                </>
              ) : (
                <>
                  <Zap className="w-5 h-5 mr-2" />
                  {getRemainingVideos()} {t.videosLeft}
                </>
              )}
            </Badge>
          </div>
        </div>

        {/* Generation Form */}
        <div className="space-y-8">
          {/* Upgrade Alert */}
          {!canGenerateVideo() && (
            <Alert className="bg-gradient-to-r from-red-500/20 to-pink-500/20 border-red-500/50">
              <Crown className="h-5 w-5" />
              <AlertDescription className="text-white">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                  <div>
                    <p className="font-bold text-lg">{t.upgradeRequired}</p>
                    <p className="text-gray-300">{t.dailyLimitReached}. {t.upgradeMessage}</p>
                  </div>
                  <Button 
                    onClick={() => navigate(createPageUrl("Pricing"))}
                    className="bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white border-0 font-semibold"
                  >
                    {t.upgradeButton}
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {/* Input Form */}
          <Card className="bg-white/10 backdrop-blur-sm border-white/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Sparkles className="w-5 h-5" />
                Video Generation
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Prompt Input */}
              <div className="space-y-2">
                <label className="text-white font-medium">{t.promptLabel}</label>
                <Textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder={t.promptPlaceholder}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 min-h-[120px]"
                />
              </div>

              {/* Style and Platform Selection */}
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-white font-medium">{t.styleLabel}</label>
                  <Select value={style} onValueChange={setStyle}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-800 border-slate-700">
                      {Object.entries(t.styles).map(([key, value]) => (
                        <SelectItem key={key} value={key} className="text-white focus:bg-slate-700">
                          {value}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-white font-medium">{t.platformLabel}</label>
                  <Select value={platform} onValueChange={setPlatform}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-800 border-slate-700">
                      {Object.entries(t.platforms).map(([key, value]) => (
                        <SelectItem key={key} value={key} className="text-white focus:bg-slate-700">
                          {value}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Script Generation */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <label className="text-white font-medium">Generated Script</label>
                  <Button
                    onClick={generateScript}
                    disabled={!prompt.trim() || isGeneratingScript}
                    variant="outline"
                    className="border-purple-500/50 text-purple-300 hover:bg-purple-500/20"
                  >
                    {isGeneratingScript ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        {t.generatingScript}
                      </>
                    ) : (
                      <>
                        <Wand2 className="w-4 h-4 mr-2" />
                        {t.generateScript}
                      </>
                    )}
                  </Button>
                </div>
                
                <Textarea
                  value={script}
                  onChange={(e) => setScript(e.target.value)}
                  placeholder="Generated script will appear here..."
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 min-h-[200px]"
                />
              </div>

              {/* Generate Video Button */}
              <div className="pt-4">
                {isGeneratingVideo ? (
                  <div className="space-y-6">
                    <div className="text-center">
                      <div className="flex items-center justify-center gap-3 text-white mb-4">
                        <Loader2 className="w-6 h-6 animate-spin" />
                        <span className="text-xl font-semibold">{t.generatingVideo}</span>
                      </div>
                      <Progress value={progress} className="h-3 mb-4" />
                      <p className="text-center text-gray-300 text-lg">
                        {t.processingSteps[currentStep]}
                      </p>
                      <p className="text-center text-purple-400 text-sm mt-2">
                        {Math.round(progress)}% complete
                      </p>
                    </div>
                  </div>
                ) : (
                  <Button
                    onClick={generateVideo}
                    disabled={!canGenerateVideo() || (!script.trim() && !prompt.trim())}
                    className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white py-8 text-xl font-bold rounded-xl shadow-2xl hover:shadow-purple-500/25 transition-all duration-300 transform hover:scale-[1.02]"
                  >
                    <Play className="w-6 h-6 mr-3" />
                    {t.generateVideo}
                    <ArrowRight className="w-6 h-6 ml-3" />
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
