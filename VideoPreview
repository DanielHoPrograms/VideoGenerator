import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Play, 
  Download, 
  Share2, 
  ExternalLink, 
  Copy,
  Twitter,
  Facebook,
  Link as LinkIcon,
  Check
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";

const translations = {
  en: {
    videoReady: "Your video is ready! 🎉",
    readySubtitle: "Click to watch or share your AI-generated video",
    watchVideo: "Watch Video",
    downloadVideo: "Download",
    shareVideo: "Share",
    shareTitle: "Share Your Video",
    copyLink: "Copy Link",
    linkCopied: "Link copied to clipboard!",
    shareOn: "Share on",
    embedCode: "Embed Code",
    videoStats: {
      duration: "Duration",
      platform: "Platform",
      style: "Style",
      generated: "Generated"
    }
  },
  zh: {
    videoReady: "您的视频已准备就绪！🎉",
    readySubtitle: "点击观看或分享您的AI生成视频",
    watchVideo: "观看视频",
    downloadVideo: "下载",
    shareVideo: "分享",
    shareTitle: "分享您的视频",
    copyLink: "复制链接",
    linkCopied: "链接已复制到剪贴板！",
    shareOn: "分享到",
    embedCode: "嵌入代码",
    videoStats: {
      duration: "时长",
      platform: "平台",
      style: "风格",
      generated: "生成时间"
    }
  }
};

export default function VideoPreview({ video, language = "en", onClose }) {
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [linkCopied, setLinkCopied] = useState(false);

  const t = translations[language];

  const videoUrl = `${window.location.origin}/video/${video.id}`;
  const embedCode = `<iframe width="315" height="560" src="${video.video_url}" frameborder="0" allowfullscreen></iframe>`;

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(videoUrl);
      setLinkCopied(true);
      setTimeout(() => setLinkCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  const handleCopyEmbed = async () => {
    try {
      await navigator.clipboard.writeText(embedCode);
      alert('Embed code copied to clipboard!');
    } catch (error) {
      console.error('Failed to copy embed code:', error);
    }
  };

  const handleSocialShare = (platform) => {
    const text = `Check out this AI-generated video: ${video.title}`;
    const url = videoUrl;

    const shareUrls = {
      twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`,
      facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`,
      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`
    };

    if (shareUrls[platform]) {
      window.open(shareUrls[platform], '_blank', 'width=600,height=400');
    }
  };

  const formatDuration = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const platformNames = {
    youtube_shorts: "YouTube Shorts",
    tiktok: "TikTok",
    instagram_reels: "Instagram Reels"
  };

  const styleNames = {
    cinematic: language === 'en' ? 'Cinematic' : '电影风格',
    animated: language === 'en' ? 'Animated' : '动画风格',
    realistic: language === 'en' ? 'Realistic' : '现实风格',
    artistic: language === 'en' ? 'Artistic' : '艺术风格'
  };

  return (
    <>
      <Card className="bg-white/10 backdrop-blur-sm border-white/20 overflow-hidden">
        <CardHeader className="text-center pb-4">
          <CardTitle className="text-2xl font-bold text-white mb-2">
            {t.videoReady}
          </CardTitle>
          <p className="text-gray-300">
            {t.readySubtitle}
          </p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Video Player */}
          <div className="relative">
            <div className="aspect-[9/16] bg-gradient-to-br from-purple-900 to-pink-900 rounded-xl overflow-hidden">
              {video.embed_code ? (
                <div dangerouslySetInnerHTML={{ __html: video.embed_code }} />
              ) : (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mb-4 mx-auto">
                      <Play className="w-8 h-8 text-white" />
                    </div>
                    <p className="text-white font-semibold">{video.title}</p>
                    <p className="text-gray-300 text-sm mt-1">AI Generated Video</p>
                  </div>
                </div>
              )}
            </div>
            
            {/* Video Info Overlay */}
            <div className="absolute bottom-4 left-4 right-4">
              <div className="bg-black/60 backdrop-blur-sm rounded-lg p-3">
                <h3 className="text-white font-semibold mb-2 line-clamp-2">{video.title}</h3>
                <div className="flex flex-wrap gap-2">
                  <Badge variant="secondary" className="text-xs">
                    {t.videoStats.duration}: {formatDuration(video.duration || 45)}
                  </Badge>
                  <Badge variant="secondary" className="text-xs">
                    {platformNames[video.platform]}
                  </Badge>
                  <Badge variant="secondary" className="text-xs">
                    {styleNames[video.style]}
                  </Badge>
                </div>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="grid grid-cols-3 gap-3">
            <Button
              onClick={() => window.open(video.video_url, '_blank')}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white"
            >
              <Play className="w-4 h-4 mr-2" />
              {t.watchVideo}
            </Button>
            
            <Button
              onClick={() => window.open(video.video_url, '_blank')}
              variant="outline"
              className="border-white/20 text-white hover:bg-white/10"
            >
              <Download className="w-4 h-4 mr-2" />
              {t.downloadVideo}
            </Button>
            
            <Button
              onClick={() => setShowShareDialog(true)}
              variant="outline"
              className="border-white/20 text-white hover:bg-white/10"
            >
              <Share2 className="w-4 h-4 mr-2" />
              {t.shareVideo}
            </Button>
          </div>

          {/* Video Stats */}
          <div className="grid grid-cols-2 gap-4 pt-4 border-t border-white/10">
            <div className="text-center">
              <p className="text-gray-400 text-sm">{t.videoStats.platform}</p>
              <p className="text-white font-semibold">{platformNames[video.platform]}</p>
            </div>
            <div className="text-center">
              <p className="text-gray-400 text-sm">{t.videoStats.style}</p>
              <p className="text-white font-semibold">{styleNames[video.style]}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Share Dialog */}
      <Dialog open={showShareDialog} onOpenChange={setShowShareDialog}>
        <DialogContent className="bg-slate-800 border-slate-700 text-white">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Share2 className="w-5 h-5" />
              {t.shareTitle}
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Copy Link */}
            <div className="space-y-2">
              <label className="text-sm font-medium">{t.copyLink}</label>
              <div className="flex gap-2">
                <Input
                  value={videoUrl}
                  readOnly
                  className="bg-slate-700 border-slate-600 text-white"
                />
                <Button
                  onClick={handleCopyLink}
                  variant="outline"
                  className={`border-slate-600 ${linkCopied ? 'bg-green-600 border-green-600' : ''}`}
                >
                  {linkCopied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                </Button>
              </div>
              {linkCopied && (
                <p className="text-green-400 text-sm">{t.linkCopied}</p>
              )}
            </div>

            {/* Social Share */}
            <div className="space-y-2">
              <label className="text-sm font-medium">{t.shareOn}</label>
              <div className="flex gap-2">
                <Button
                  onClick={() => handleSocialShare('twitter')}
                  variant="outline"
                  className="flex-1 border-slate-600"
                >
                  <Twitter className="w-4 h-4 mr-2" />
                  Twitter
                </Button>
                <Button
                  onClick={() => handleSocialShare('facebook')}
                  variant="outline"
                  className="flex-1 border-slate-600"
                >
                  <Facebook className="w-4 h-4 mr-2" />
                  Facebook
                </Button>
              </div>
            </div>

            {/* Embed Code */}
            <div className="space-y-2">
              <label className="text-sm font-medium">{t.embedCode}</label>
              <div className="flex gap-2">
                <Input
                  value={embedCode}
                  readOnly
                  className="bg-slate-700 border-slate-600 text-white text-xs"
                />
                <Button
                  onClick={handleCopyEmbed}
                  variant="outline"
                  className="border-slate-600"
                >
                  <Copy className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
